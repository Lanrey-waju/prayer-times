// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: prayer_times.sql

package cache

import (
	"context"
)

const getPrayerTimeForCity = `-- name: GetPrayerTimeForCity :one
SELECT fajr, dhuhr, asr, maghrib, isha FROM prayer_times
WHERE city = ? AND date = ?
`

type GetPrayerTimeForCityParams struct {
	City string
	Date string
}

type GetPrayerTimeForCityRow struct {
	Fajr    string
	Dhuhr   string
	Asr     string
	Maghrib string
	Isha    string
}

func (q *Queries) GetPrayerTimeForCity(ctx context.Context, arg GetPrayerTimeForCityParams) (GetPrayerTimeForCityRow, error) {
	row := q.db.QueryRowContext(ctx, getPrayerTimeForCity, arg.City, arg.Date)
	var i GetPrayerTimeForCityRow
	err := row.Scan(
		&i.Fajr,
		&i.Dhuhr,
		&i.Asr,
		&i.Maghrib,
		&i.Isha,
	)
	return i, err
}

const savePrayerTimes = `-- name: SavePrayerTimes :exec
INSERT INTO prayer_times (city, date, fajr, dhuhr, asr, maghrib, isha)
VALUES (?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(city, date) DO UPDATE SET
    fajr = excluded.fajr,
    dhuhr = excluded.dhuhr,
    asr = excluded.asr,
    maghrib = excluded.maghrib,
    isha = excluded.isha
`

type SavePrayerTimesParams struct {
	City    string
	Date    string
	Fajr    string
	Dhuhr   string
	Asr     string
	Maghrib string
	Isha    string
}

func (q *Queries) SavePrayerTimes(ctx context.Context, arg SavePrayerTimesParams) error {
	_, err := q.db.ExecContext(ctx, savePrayerTimes,
		arg.City,
		arg.Date,
		arg.Fajr,
		arg.Dhuhr,
		arg.Asr,
		arg.Maghrib,
		arg.Isha,
	)
	return err
}
